/**
 * Common
 */

static String toCamelCase(String text) {
  return text.replaceAll("(_|-|\\.)([A-Za-z0-9])", { Object[] it -> it[2].toUpperCase() })
}

static String[] servicesToDcFilePaths(LinkedHashMap<String, String> services) {
  def dockerComposeFilePaths = []

  services.each { name, filePath ->
    dockerComposeFilePaths += ["-f", filePath]
  }

  return dockerComposeFilePaths
}

/**
 *  Docker compose
 */

def services = [
  "user-manager.back"     : "user-manager/docker-compose.backend.yml",
  "user-manager.back.test": "user-manager/docker-compose.backend.test.yml",
  "user-manager.front"    : "user-manager/docker-compose.frontend.yml",
  "proxy"                 : "env/docker-compose.proxy.yml",
]

def commands = [
  "up"  : [["up", "-d"], "Start containers"],
  "ps"  : [["ps"], "Show containers list"],
  "stop": [["stop"], "Stop containers"],
  "down": [["down", "-v"], "Stop and delete containers and volumes"],
]

class DockerCompose extends Exec {
  DockerCompose() {
    group "docker-compose"
    executable "docker-compose"
    doFirst {
      println "\nExecuded command - `" + commandLine.join(" ") + "`"
    }
  }
}

class DockerComposeExec extends DockerCompose {
  String[] dockerComposeFilePaths

  DockerComposeExec() {
    group "docker-compose"
    executable "docker-compose"
    doFirst {
      println "\nExecuded command - `" + commandLine.join(" ") + "`"
    }
    if (project.hasProperty("cmd")) {
      args new ArrayList<String>(dockerComposeFilePaths + project.getProperty("cmd").split(" ").flatten())
    }

    finalizedBy {
      if (!project.hasProperty("cmd")) {
        throw new IllegalArgumentException("Not found command for execute. You can try by example: `./gradlew $name up -d`")
      }
    }
  }

  void setDockerComposeFilePaths(String[] dockerComposeFilePaths) {
    this.dockerComposeFilePaths = dockerComposeFilePaths
  }
}

task dc(type: DockerComposeExec) {
  group "docker-compose.all"
  description "docker-compose unifying all docker-compose yml files"
  dockerComposeFilePaths servicesToDcFilePaths(services)
}

commands.each { taskName, meta ->
  def cmd = meta.get(0)
  def descr = meta.get(1)

  tasks.register(taskName, DockerCompose) {
    group "docker-compose.all"
    description descr
    args (servicesToDcFilePaths(services) + cmd as ArrayList<? extends String>)
  }
}

services.each { serviceName, dockerComposeFilePath ->
  def name = toCamelCase(serviceName)
  def filePaths = servicesToDcFilePaths(services)
  tasks.register(name, DockerComposeExec) {
    group "docker-compose.$serviceName"
    description "Docker-compose for $serviceName"
    dockerComposeFilePaths filePaths
  }

  commands.each { taskName, meta ->
    def cmd = meta.get(0)
    def descr = meta.get(1)

    tasks.register(toCamelCase(serviceName + "_" + taskName), DockerCompose) {
      group "docker-compose.$serviceName"
      description descr
      args new ArrayList<String>(["-f", dockerComposeFilePath] + cmd)
    }
  }
}
