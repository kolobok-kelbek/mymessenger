version: "3.8"

services:

  mm-um-backend-doc:
    image: nginx:1.19.7-alpine
    container_name: mm-um-backend-doc
    volumes:
      - ./backend:/app
      - ./env/nginx/nginx.doc.conf:/etc/nginx/conf.d/default.conf
    networks:
      - mm-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.um-doc.rule=Host(`um.doc.mm.local`)

  mm-um-backend-app:
    build: ./env/backend
    container_name: mm-um-backend-app
    command: gradle bootRun
    volumes:
      - ./backend:/app
    networks:
      - mm-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.um-api.rule=Host(`um.api.mm.local`)

  mm-um-backend-db:
    image: postgres:13.2-alpine
    container_name: mm-um-backend-db
    environment:
      POSTGRES_USER: muser
      POSTGRES_PASSWORD: muser
      POSTGRES_DB: mm
    volumes:
      - mm-um-db-config-data:/var/lib/postgresql/data
      - ./log/backend/postgres:/log/postgresql
      - ./env/postgres/postgresql.conf:/etc/postgresql/postgresql.conf:ro
    networks:
      - mm-network
    command: ["postgres", "-c", "config_file=/etc/postgresql/postgresql.conf"]

  mm-um-backend-db-admin:
    image: adminer:4.8.0
    container_name: mm-um-backend-db-admin
    environment:
      ADMINER_DEFAULT_DB_DRIVER: pgsql
      ADMINER_DEFAULT_DB_HOST: um-db
      ADMINER_DEFAULT_DB_NAME: mm
    networks:
      - mm-network
    labels:
      - traefik.enable=true
      - traefik.http.routers.um-adminer.rule=Host(`um.adminer.mm.local`)

networks:
  mm-network:
    name: mm-network
    external: true

volumes:
  mm-um-db-config-data:

